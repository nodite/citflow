{
  "openapi": "3.0.0",
  "paths": {
    "/login-service/v1/health": {
      "get": {
        "operationId": "simple-health-check",
        "summary": "Health check that return only status OK",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Health"]
      }
    },
    "/login-service/v1/healthz": {
      "get": {
        "operationId": "full-health-check",
        "summary": "Health check that verify database connectivity and env vars",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": ["status"],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Health"]
      }
    },
    "/login-service/v1/tenant": {
      "patch": {
        "operationId": "upsert-tenant",
        "summary": "Create/update user tenants",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertUserTenantsDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User tenants created/updated successfully"
          },
          "400": {
            "description": ""
          }
        },
        "tags": ["User's Tenants"]
      }
    },
    "/login-service/v1/tenants": {
      "get": {
        "operationId": "get-user-tenants",
        "summary": "Get user tenants by email",
        "parameters": [
          {
            "name": "principal",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object with user tenants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTenantsDto"
                }
              }
            }
          },
          "404": {
            "description": "Email or object with user tenants not exists"
          }
        },
        "tags": ["User's Tenants"]
      }
    },
    "/login-service/v1/tenant/{tenant}/users": {
      "get": {
        "operationId": "tenant.users",
        "summary": "Return users from specific tenant.",
        "parameters": [
          {
            "name": "tenant",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users from specific tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request. Indicates that invalidy tenant was received."
          }
        },
        "tags": ["User's Tenants"]
      }
    },
    "/login-service/v1/tenant/users": {
      "post": {
        "operationId": "add-tenant-to-users",
        "summary": "Add tenant to users",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTenantToUsersDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content. Indicates that the tenant was added to users successfully."
          }
        },
        "tags": ["User's Tenants"]
      }
    },
    "/login-service/v1/tenants/data": {
      "get": {
        "operationId": "get-user-tenants-data",
        "summary": "Get user tenants data by email.",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object with user tenants data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTenantsDataDto"
                }
              }
            }
          },
          "404": {
            "description": "Email or object with user tenants data not exists"
          }
        },
        "tags": ["User's Tenants"]
      }
    },
    "/login-service/v1/user": {
      "patch": {
        "operationId": "upsert-user-super-admin",
        "summary": "Upsert user super-admin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertUserSuperAdminDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User super-admin upserted successfully"
          }
        },
        "tags": ["User"]
      }
    },
    "/login-service/v1/user/email": {
      "patch": {
        "operationId": "update-user-email",
        "summary": "Update user email",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserEmailDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User email updated successfully"
          },
          "400": {
            "description": ""
          }
        },
        "tags": ["User"]
      }
    },
    "/login-service/v1/tenant/principal": {
      "patch": {
        "operationId": "update-user-principal-tenant",
        "summary": "Update user principal tenant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPrincipalTenantDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User principal tenant updated successfully"
          },
          "400": {
            "description": ""
          }
        },
        "tags": ["User's Tenants"]
      }
    },
    "/login-service/v1/b2c-user/{b2cId}": {
      "delete": {
        "operationId": "b2c-user-delete",
        "summary": "Delete b2c user by id",
        "parameters": [
          {
            "name": "b2cId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "B2c user not found"
          }
        },
        "tags": ["B2C User"]
      },
      "patch": {
        "operationId": "update-b2c-user",
        "summary": "Update b2c user",
        "parameters": [
          {
            "name": "b2cId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2cUserDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "B2c User updated successfully"
          },
          "400": {
            "description": ""
          }
        },
        "tags": ["B2C User"]
      }
    },
    "/login-service/v1/b2c-user": {
      "post": {
        "operationId": "b2c-user-create",
        "summary": "Create b2c user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2cUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": ["B2C User"]
      }
    },
    "/login-service/v1/b2c-user/{email}": {
      "get": {
        "operationId": "get-b2c-user",
        "summary": "Get b2c user by email",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found successfully."
          },
          "401": {
            "description": "Unauthorized access. Invalid or expired token."
          }
        },
        "tags": ["B2C User"]
      }
    },
    "/login-service/v1/onboarding/terms": {
      "get": {
        "operationId": "RetrieveTermsController_getOnboardingTerms",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success. Indicates that the onboarding terms were retrieved successfully."
          },
          "401": {
            "description": "Unauthorized. Indicates that the user is not authorized to access the onboarding terms."
          }
        },
        "tags": ["Onboarding"]
      }
    },
    "/login-service/v1/onboarding/terms/{term_id}": {
      "post": {
        "operationId": "AcceptTermController_postAcceptTerms",
        "parameters": [
          {
            "name": "term_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptTermBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. Indicates that the term has been accepted successfully."
          },
          "401": {
            "description": "Unauthorized. Indicates that the user is not authorized to accept the term."
          },
          "409": {
            "description": "Conflict. Indicates that the term has been already accepted."
          }
        },
        "tags": ["Onboarding"]
      }
    },
    "/login-service/v1/auth/token/validate": {
      "post": {
        "operationId": "token.validate",
        "summary": "Validate the token and refresh it if it is expired.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateTokenBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Indicates that the token is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateTokenResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Indicates that the token is invalid or expired and cannot be refreshed."
          }
        },
        "tags": ["Auth"]
      }
    },
    "/login-service/v1/auth/single-use-code/consume": {
      "post": {
        "operationId": "single-use-code.consume",
        "summary": "Consumes a Single Use Code",
        "description": "This endpoint consumes a single use code to authenticate or authorize a transaction, returning the content or data associated with the code. The code can only be used once and is considered invalid after consumption.",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "query",
            "description": "The UUID of the single use code to be consumed. This code is intended for a one-time authentication or authorization process.",
            "schema": {
              "example": "123e456-1234-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response contains the data associated with the consumed code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumeSingleUseCodeResult"
                }
              }
            }
          },
          "404": {
            "description": "The code was not found or has already been consumed. This response indicates that the provided code is invalid or expired."
          }
        },
        "tags": ["Auth"]
      }
    },
    "/login-service/v1/auth/signature/verify": {
      "post": {
        "operationId": "signature.verify",
        "summary": "Verify a signature",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySignatureBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Indicates that the signature is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySignatureResult"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest. Indicates that invalid signature or corrupted state was received."
          }
        },
        "tags": ["Auth"]
      }
    },
    "/login-service/v1/auth/token/create": {
      "post": {
        "operationId": "token.create",
        "summary": "Creates a token based on the given grant_code.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTokenBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Creates a token based on the given grant_code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTokenBody"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Indicates that the code is not valid"
          }
        },
        "tags": ["Auth"]
      }
    },
    "/login-service/v1/auth/token/restore": {
      "post": {
        "operationId": "token.restore",
        "summary": "Restore the authentication flow so the user can continue from where it left off.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreTokenBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Restored the authentication flow so the user can continue from where it left off.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestoreTokenBody"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Indicates that the auth flow cannot be restored."
          }
        },
        "tags": ["Auth"]
      }
    },
    "/login-service/v1/auth/signature/create": {
      "post": {
        "operationId": "signature.create",
        "summary": "Create a signature for the given state information",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignatureBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Indicates that the signature was properly created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSignatureResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Indicates that an unexpected error occurred."
          }
        },
        "tags": ["Auth"]
      }
    },
    "/login-service/v1/auth/policy-url/generate-for-tenant": {
      "post": {
        "operationId": "auth.policy-url.generate-for-tenant",
        "summary": "Generates a Policy URL for a Specific Tenant",
        "description": "Generates a unique policy URL for authentication within a specified tenant context, based on the authenticated user’s email and the provided tenant information.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePolicyUrlForTenantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The policy URL was generated successfully. The URL is used for authentication within the specified tenant context."
          },
          "403": {
            "description": "Forbidden. The request lacks valid authentication credentials for the target resource or the user does not have permission to generate a policy URL for the specified tenant."
          }
        },
        "tags": ["Auth"]
      }
    },
    "/login-service/v1/auth/policy-url/generate-principal": {
      "post": {
        "operationId": "tenant.principal-policy-url",
        "summary": "Generates the Principal Policy URL for a ",
        "description": "Generates a URL for policy access based on the user’s email. It ensures the email has an associated tenant and identifies the principal tenant to generate the URL.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePrincipalPolicyUrlDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful and the policy URL has been generated."
          },
          "403": {
            "description": "Forbidden. No tenant is associated with the provided email, or no principal tenant could be found."
          }
        },
        "tags": ["Auth"]
      }
    }
  },
  "info": {
    "title": "Login Service API",
    "description": "This API handles authentication flows for the platform.",
    "version": "v1.49.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "UpsertUserTenantsDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "example@email.com"
          },
          "tenants": {
            "type": "object",
            "example": {
              "tenantA": {
                "isPrincipal": true
              },
              "tenantB": {
                "isPrincipal": false
              }
            }
          },
          "flowUserId": {
            "type": "string",
            "example": "uuid"
          }
        },
        "required": ["email", "tenants", "flowUserId"]
      },
      "TenantDto": {
        "type": "object",
        "properties": {
          "isPrincipal": {
            "type": "boolean"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["isPrincipal", "updatedAt"]
      },
      "UserTenantsDto": {
        "type": "object",
        "properties": {
          "tenantName": {
            "$ref": "#/components/schemas/TenantDto"
          }
        },
        "required": ["tenantName"]
      },
      "AddTenantToUsersDto": {
        "type": "object",
        "properties": {
          "tenantName": {
            "type": "string"
          },
          "isPrincipal": {
            "type": "boolean",
            "default": false
          },
          "usersEmail": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["tenantName", "isPrincipal", "usersEmail"]
      },
      "UserTenantsDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "a2bcedf695c2aa2ffc94a1db"
          },
          "emailHash": {
            "type": "string",
            "example": "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
          },
          "flowUserId": {
            "type": "string",
            "example": "c3d74b89-89cd-433d-9dd4-9bde69cd3813"
          },
          "tenants": {
            "type": "object",
            "example": {
              "tenantA": {
                "isPrincipal": true
              },
              "tenantB": {
                "isPrincipal": false
              }
            }
          }
        },
        "required": ["id", "emailHash", "flowUserId", "tenants"]
      },
      "UpsertUserSuperAdminDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "isSuperAdmin": {
            "type": "boolean"
          }
        },
        "required": ["email", "isSuperAdmin"]
      },
      "UpdateUserEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "example@email.com"
          },
          "newEmail": {
            "type": "string",
            "example": "example2@email.com"
          }
        },
        "required": ["email", "newEmail"]
      },
      "UpdateUserPrincipalTenantDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "tenant": {
            "type": "string"
          }
        },
        "required": ["email", "tenant"]
      },
      "B2cUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": ["email"]
      },
      "AcceptTermBody": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "A generated state for the login flow, it's used to maintain state between each request in the authentication process.",
            "example": "eyJraWQiOiJFT1haTFhPdTE4Y3dnNnhQSzQwU21PeG81b09velBVdHpwU3JVM0xWQ3BRIiwidmVyIjoiMS4wIiwiemlwIjoiRGVmbGF0ZSIsInNlciI6IjEuMCJ9.pThk2ZMr_KXt7zq3BkzLJQ_Z_4JK7Rbc6x0Qt83e9ZZd9wjVsoB2V5RCsfwz6lR6-z"
          }
        },
        "required": ["state"]
      },
      "ValidateTokenBody": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT to validate"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token"
          }
        },
        "required": ["token", "refreshToken"]
      },
      "ValidateTokenResult": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT to validate"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token"
          },
          "refreshed": {
            "type": "boolean",
            "description": "Indicates if the token was refreshed"
          }
        },
        "required": ["token", "refreshToken", "refreshed"]
      },
      "ConsumeSingleUseCodeResult": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The UUID of the consumed single use code, confirming the code has been successfully used.",
            "example": "123e456-1234-12d3-a456-426614174000"
          },
          "content": {
            "type": "object",
            "description": "The payload or content associated with the consumed code, which may vary depending on the use case or application logic."
          }
        },
        "required": ["code", "content"]
      },
      "VerifySignatureBody": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state signed via signature/create endpoint"
          }
        },
        "required": ["state"]
      },
      "VerifySignatureResult": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "string",
            "example": "cit-dev",
            "description": "The tenant unique name"
          },
          "channel": {
            "type": "string",
            "example": "vscode",
            "description": "The original channel name"
          },
          "code": {
            "type": "string",
            "example": "aaf4c61d-d82d-4d9d-8c27-3d4d8c3d4d8c",
            "description": "The abitrary generated code which will be associated with the auth flow"
          },
          "redirectUri": {
            "type": "string",
            "example": "https://localhost:3000/auth/callback",
            "description": "The redirect uri to be used in the auth flow"
          },
          "tenantDisplayName": {
            "type": "string",
            "example": "CI&T Dev",
            "description": "The tenant display name"
          },
          "policyName": {
            "type": "string",
            "example": "B2C_policy",
            "description": "The policy name"
          }
        },
        "required": ["tenant", "channel", "code", "redirectUri", "tenantDisplayName", "policyName"]
      },
      "CreateTokenBody": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The OAuth grant code"
          },
          "state": {
            "type": "string",
            "description": "The state parameter"
          }
        },
        "required": ["code", "state"]
      },
      "RestoreTokenBody": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The current JWT"
          },
          "refreshToken": {
            "type": "string",
            "description": "The current refresh token"
          },
          "state": {
            "type": "string",
            "description": "The state parameter"
          }
        },
        "required": ["token", "refreshToken", "state"]
      },
      "CreateSignatureBody": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "string",
            "example": "cit-dev",
            "description": "The tenant unique name"
          },
          "channel": {
            "type": "string",
            "example": "vscode",
            "description": "The original channel name"
          },
          "code": {
            "type": "string",
            "example": "aaf4c61d-d82d-4d9d-8c27-3d4d8c3d4d8c",
            "description": "The abitrary generated code which will be associated with the auth flow"
          },
          "redirectUri": {
            "type": "string",
            "example": "https://localhost:3000/auth/callback",
            "description": "The redirect uri to be used in the auth flow"
          }
        },
        "required": ["tenant", "channel", "code", "redirectUri"]
      },
      "CreateSignatureResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "example": "dnNjb2RlOmFhZjRjNjFkLWQ4MmQtNGQ5ZC04YzI3LTNkNGQ4YzNkNGQ4YzpjaXQtZGV2Omh0dHBzJTNBJTJGJTJGbG9jYWxob3N0JTNBMzAwMCUyRmF1dGglMkZjYWxsYmFjazoxNzA4NTA2NDU5Mjc2OjlhZWExN2RkOTkyMjk0ZDdhMmY0NWRiY2QyNzcxZDkxNzI3ZjJmNmNkNzBjYjk5NzIyZGI0YWI5MWI5NzM4MDg=",
            "description": "A base64 string holding the content and the signature itself"
          }
        },
        "required": ["content"]
      },
      "GeneratePolicyUrlForTenantDto": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "A generated state for the login flow, it's used to maintain state between each request in the authentication process.",
            "example": "eyJraWQiOiJFT1haTFhPdTE4Y3dnNnhQSzQwU21PeG81b09velBVdHpwU3JVM0xWQ3BRIiwidmVyIjoiMS4wIiwiemlwIjoiRGVmbGF0ZSIsInNlciI6IjEuMCJ9.pThk2ZMr_KXt7zq3BkzLJQ_Z_4JK7Rbc6x0Qt83e9ZZd9wjVsoB2V5RCsfwz6lR6-z"
          },
          "tenant": {
            "type": "string",
            "description": "The name of the tenant for which the policy URL is to be generated. This specifies the context in which the user is authenticating.",
            "example": "cit-dev"
          }
        },
        "required": ["state", "tenant"]
      },
      "GeneratePrincipalPolicyUrlDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the user for whom the policy URL is being generated. Must be a valid email format.",
            "example": "erikt@ciandt.com"
          },
          "code": {
            "type": "string",
            "description": "An UUID code that will be used to store auth states further in the authentication flow.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the request is made, affecting the resulting URL.",
            "example": "vscode"
          },
          "redirectUri": {
            "type": "string",
            "description": "The redirect URI to which a user will be redirected after the authentication is completed.",
            "example": "https://example.com/callback"
          }
        },
        "required": ["email", "code", "channel", "redirectUri"]
      }
    }
  }
}
